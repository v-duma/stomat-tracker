import {
  fetchDataByDate,
  addWorkingHours,
  calculateWorkDuration,
  calculateDailySalary,
  fetchStatistics,
  calculateStatistics,
  updateExistingWorkingHours,
  deleteWorkingHours,
} from "/assets/js/database.js";

document.addEventListener("DOMContentLoaded", function () {
  const calendarEl = document.getElementById("calendar");

  if (typeof FullCalendar === "undefined") {
    console.error(
      "FullCalendar –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —É index.html."
    );
    return;
  }

  const calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: "dayGridMonth",
    locale: "uk",
    firstDay: 1,
    showNonCurrentDates: false,
    selectable: true,
    dateClick: async function (info) {
      const selectedDate = info.dateStr; // –§–æ—Ä–º–∞—Ç ISO: "2025-02-06"
      document.getElementById(
        "selected-date-title"
      ).textContent = `${selectedDate.split("-").reverse().join(".")}`;

      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É
      const data = await fetchDataByDate(selectedDate);
      const contentContainer = document.getElementById("date-info-content");

      if (data.length > 0) {
        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        contentContainer.innerHTML = `<ul>${data
          .map(
            (d) =>
              `<li>
              <li><b>–ß–∞—Å:</b> <span>${d.startTime} - ${d.endTime}</span><li>
              <li><b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> <span>${d.workDuration}</span><li>
              <li><b>–ü—Ä–∏–º—ñ—Ç–∫–∏:</b> <span>${d.notes || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</span><li>
              <li><b>–°—É–º–∞:</b> <span>${
                d.dailySalary || "–ù–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ"
              }</span></li>
              <li><b>–¢–∞–π–º–µ—Ä:</b> <span id="timer-${
                d.startTime
              }">${checkIfTimerNeeded(
                selectedDate,
                d.startTime,
                d.endTime
              )}</span>
            </li>`
          )
          .join("")}</ul>`;

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–±—ñ—Ç
        data.forEach((d) => {
          if (isWorkActive(selectedDate, d.startTime, d.endTime)) {
            startRealTimeTimer(`timer-${d.startTime}`, selectedDate, d.endTime);
          }
        });
      } else {
        // –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
        contentContainer.innerHTML = `
        <p>–ë—É–±—ñ—á–æ–∫, —Ç–∏ —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–≤ —ñ–Ω—Ñ—É –Ω–∞ —Ü–µ–π –¥–µ–Ω—åü•≤ –≤–∏–ø—Ä–∞–≤ —Ü–µ!üíô</p>
        <form id="add-new-data-form">
          <label>–ß–∞—Å –ø–æ—á–∞—Ç–∫—É:</label>
          <div class="time-picker-wrapper">
          <input type="time" id="new-start-time" required><br>
          </div>
          <label>–ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</label>
          <input type="time" id="new-end-time" required><br>
          <label>–ü—Ä–∏–º—ñ—Ç–∫–∏:</label>
          <textarea id="new-notes" placeholder="–©–æ —Ü—ñ–∫–∞–≤–æ–≥–æ?"></textarea><br>
          <button type="submit">–î–æ–¥–∞—Ç–∏</button>
        </form>
      `;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏
        document
          .getElementById("add-new-data-form")
          .addEventListener("submit", async (event) => {
            event.preventDefault();

            const newStartTime =
              document.getElementById("new-start-time").value;
            const newEndTime = document.getElementById("new-end-time").value;
            const newNotes = document.getElementById("new-notes").value;

            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —ñ –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É
            const workDuration = calculateWorkDuration(
              newStartTime,
              newEndTime
            );
            const hourlyRate = 120; // –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–≤–∫—É –∑–∞ –≥–æ–¥–∏–Ω—É
            const dailySalary = calculateDailySalary(workDuration, hourlyRate);

            // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            await addWorkingHours(
              selectedDate,
              newStartTime,
              newEndTime,
              workDuration,
              dailySalary,
              newNotes
            );

            alert("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!");
            document.getElementById("date-info-modal").style.display = "none";
          });
      }

      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
      document.getElementById("date-info-modal").style.display = "flex";

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –±–ª–æ–∫
      checkAndDisplayWorkData(selectedDate); // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
    },

    // –ü–æ–¥—ñ—è, —è–∫–∞ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    datesSet: async function () {
      // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—è—Ü—è –∑ —Ç—É–ª–±–∞—Ä–∞
      const monthTitle =
        document.querySelector(".fc-toolbar-title").textContent;
      const monthName = monthTitle.split(" ")[0].toLowerCase(); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ –º–∞–ª–µ–Ω—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏

      // –ú–∞—Å–∏–≤ –º—ñ—Å—è—Ü—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –∑ –º–∞–ª–µ–Ω—å–∫–æ—ó –±—É–∫–≤–∏
      const monthNames = [
        "—Å—ñ—á–µ–Ω—å",
        "–ª—é—Ç–∏–π",
        "–±–µ—Ä–µ–∑–µ–Ω—å",
        "–∫–≤—ñ—Ç–µ–Ω—å",
        "—Ç—Ä–∞–≤–µ–Ω—å",
        "—á–µ—Ä–≤–µ–Ω—å",
        "–ª–∏–ø–µ–Ω—å",
        "—Å–µ—Ä–ø–µ–Ω—å",
        "–≤–µ—Ä–µ—Å–µ–Ω—å",
        "–∂–æ–≤—Ç–µ–Ω—å",
        "–ª–∏—Å—Ç–æ–ø–∞–¥",
        "–≥—Ä—É–¥–µ–Ω—å",
      ];

      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –º—ñ—Å—è—Ü—è (0-11)
      const visibleMonth = monthNames.indexOf(monthName);
      const currentYear = calendar.getDate().getFullYear(); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫

      const firstDay = new Date(currentYear, visibleMonth, 1); // –ü–µ—Ä—à–∞ –¥–∞—Ç–∞ –≤–∏–¥–∏–º–æ–≥–æ –º—ñ—Å—è—Ü—è
      const lastDay = new Date(currentYear, visibleMonth + 1, 0); // –û—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞ –≤–∏–¥–∏–º–æ–≥–æ –º—ñ—Å—è—Ü—è

      let currentDate = firstDay;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –¥–∞—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
      while (currentDate <= lastDay) {
        const formattedDate = currentDate.toISOString().split("T")[0];
        await checkAndDisplayWorkData(formattedDate); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ–∂–Ω–æ—ó –¥–∞—Ç–∏
        currentDate.setDate(currentDate.getDate() + 1); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è
      }
    },
  });

  calendar.render();
});

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
document.querySelector(".close-modal").addEventListener("click", () => {
  document.getElementById("date-info-modal").style.display = "none";
});

// –¢–∞–π–º–µ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
function startRealTimeTimer(elementId, selectedDate, endTime) {
  const timerElement = document.getElementById(elementId);

  // –ü–æ—î–¥–Ω—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  const endDateTime = new Date(`${selectedDate}T${endTime}`);

  const interval = setInterval(() => {
    const now = new Date();
    const remainingTime = Math.max(0, endDateTime - now);

    if (remainingTime === 0) {
      timerElement.textContent = "–†–æ–±–æ—Ç–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å";
      clearInterval(interval);
      return;
    }

    const remainingSeconds = Math.floor(remainingTime / 1000);
    const hours = Math.floor(remainingSeconds / 3600);
    const minutes = Math.floor((remainingSeconds % 3600) / 60);
    const seconds = remainingSeconds % 60;

    timerElement.textContent = `${hours.toString().padStart(2, "0")}:${minutes
      .toString()
      .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  }, 1000);
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä–æ–±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
function isWorkActive(selectedDate, startTime, endTime) {
  const now = new Date();
  const startDateTime = new Date(`${selectedDate}T${startTime}`);
  const endDateTime = new Date(`${selectedDate}T${endTime}`);

  return now >= startDateTime && now <= endDateTime;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏
function checkIfTimerNeeded(selectedDate, startTime, endTime) {
  const now = new Date();
  const startDateTime = new Date(`${selectedDate}T${startTime}`);
  const endDateTime = new Date(`${selectedDate}T${endTime}`);

  if (now < startDateTime) {
    return "–©–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—å";
  } else if (now > endDateTime) {
    return "–†–æ–±–æ—Ç–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å";
  } else {
    return "–¢—Ä–∏–≤–∞—î...";
  }
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ —Ö—Ä–µ—Å—Ç–∏–∫ –∞–±–æ –ø–æ–∑–∞ –º–æ–¥–∞–ª–∫–æ—é
// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø–æ —Ö—Ä–µ—Å—Ç–∏–∫—É –∞–±–æ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
document.addEventListener("DOMContentLoaded", function () {
  const modal = document.getElementById("details-modal");
  const closeModal = modal.querySelector(".close-modal");

  if (closeModal) {
    closeModal.addEventListener("click", () => {
      modal.style.display = "none";
    });
  }

  window.addEventListener("click", (event) => {
    if (event.target === modal) {
      modal.style.display = "none";
    }
  });
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
function getDateRange(period) {
  const now = new Date(); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
  const dayOfWeek = now.getDay(); // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ–Ω—å —Ç–∏–∂–Ω—è (0 - –Ω–µ–¥—ñ–ª—è, 1 - –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, ...)

  let startDate, endDate;

  if (period === "week") {
    // –Ø–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–¥—ñ–ª—è (dayOfWeek === 0), —Ç–æ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –º–∞—î –±—É—Ç–∏ 6 –¥–Ω—ñ–≤ —Ç–æ–º—É
    const diffToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–æ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –æ–±'—î–∫—Ç–∏ –¥–ª—è –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ —ñ –Ω–µ–¥—ñ–ª—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
    startDate = new Date(now);
    startDate.setDate(now.getDate() - diffToMonday); // –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
    endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6); // –ù–µ–¥—ñ–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
  } else if (period === "month") {
    // –ü–æ—á–∞—Ç–æ–∫ –º—ñ—Å—è—Ü—è (1 —á–∏—Å–ª–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è)
    startDate = new Date(now.getFullYear(), now.getMonth(), 1);

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
    endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
  } else if (period === "year") {
    startDate = new Date(now.getFullYear(), 0, 1); // –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∫—É
    endDate = new Date(now.getFullYear(), 11, 31); // –ö—ñ–Ω–µ—Ü—å —Ä–æ–∫—É
  }

  // –í–∏–±—ñ—Ä –≤–ª–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
  if (period === "custom") {
    const start = document.getElementById("start-date").value;
    const end = document.getElementById("end-date").value;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –¥–∞—Ç
    if (!start || !end) {
      return { startDate: null, endDate: null }; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ null, —è–∫—â–æ –¥–∞—Ç–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
    }

    startDate = new Date(start);
    endDate = new Date(end);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞—Ç
    if (isNaN(startDate) || isNaN(endDate)) {
      return { startDate: null, endDate: null }; // –Ø–∫—â–æ –¥–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ
    }
  }

  return {
    startDate:
      startDate instanceof Date
        ? startDate.toISOString().split("T")[0]
        : startDate,
    endDate:
      endDate instanceof Date ? endDate.toISOString().split("T")[0] : endDate,
  };
}

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É
document
  .getElementById("period-select")
  .addEventListener("change", function () {
    const period = this.value;
    const { startDate, endDate } = getDateRange(period);

    // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "–í–ª–∞—Å–Ω–∏–π –ø–µ—Ä—ñ–æ–¥", –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç
    if (period === "custom") {
      document.getElementById("custom-period").style.display = "block";
    } else {
      document.getElementById("custom-period").style.display = "none";
    }

    // –°–ø–æ—á–∞—Ç–∫—É –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —è–∫—â–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –ø–µ—Ä—ñ–æ–¥
    if (period === "") {
      hideStatistics();
      return;
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
    updateStatistics(startDate, endDate);
  });

// –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–î—ñ–∑–Ω–∞—Ç–∏—Å—è" –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
// –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–î—ñ–∑–Ω–∞—Ç–∏—Å—è" –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
document
  .getElementById("get-statistics")
  .addEventListener("click", function () {
    const startDateInput = document.getElementById("start-date").value;
    const endDateInput = document.getElementById("end-date").value;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    if (!startDateInput || !endDateInput) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–±–∏–¥–≤—ñ –¥–∞—Ç–∏.");
      return;
    }

    const startDate = new Date(startDateInput);
    const endDate = new Date(endDateInput);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞—Ç
    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
      alert("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É.");
      console.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞—Ç–∏:", startDateInput, endDateInput);
      return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–µ –ø–µ—Ä–µ–¥—É—î –¥–∞—Ç—ñ –ø–æ—á–∞—Ç–∫—É
    if (endDate < startDate) {
      alert("–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Ä–∞–Ω—ñ—à–µ –¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫—É!");
      console.error("–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–∞–Ω—ñ—à–µ –¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫—É:", startDate, endDate);
      return;
    }

    // –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD
    const formattedStartDate = startDate.toISOString().split("T")[0];
    const formattedEndDate = endDate.toISOString().split("T")[0];

    console.log(
      "üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑",
      formattedStartDate,
      "–ø–æ",
      formattedEndDate
    );
    updateStatistics(formattedStartDate, formattedEndDate);
  });

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —É —Ñ–æ—Ä–º–∞—Ç "X –≥–æ–¥ Y —Ö–≤"
function formatTime(hours) {
  const h = Math.floor(hours); // –û—Ç—Ä–∏–º—É—î–º–æ –≥–æ–¥–∏–Ω–∏
  const m = Math.round((hours - h) * 60); // –û—Ç—Ä–∏–º—É—î–º–æ —Ö–≤–∏–ª–∏–Ω–∏

  return `${h} –≥–æ–¥ ${m} —Ö–≤`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function updateStatistics(startDate, endDate) {
  if (
    !startDate ||
    !endDate ||
    isNaN(new Date(startDate)) ||
    isNaN(new Date(endDate))
  ) {
    console.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞—Ç–∏: ", startDate, endDate);
    return;
  }

  const records = await fetchStatistics(startDate, endDate);

  const stats = calculateStatistics(records);

  // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  document.getElementById("total-hours").style.display = "block";
  document.getElementById("total-salary").style.display = "block";
  document.getElementById("max-hours").style.display = "block";
  document.getElementById("min-hours").style.display = "block";
  document.getElementById("max-salary").style.display = "block";
  document.getElementById("min-salary").style.display = "block";

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ formatTime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
  document.getElementById(
    "total-hours"
  ).textContent = `–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω: ${formatTime(stats.totalHours)}`;
  document.getElementById(
    "total-salary"
  ).textContent = `–ó–∞–≥–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: ${stats.totalSalary.toFixed(2)} –≥—Ä–Ω`;
  document.getElementById(
    "max-hours"
  ).textContent = `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω —É –¥–µ–Ω—å: ${formatTime(
    stats.maxHours
  )}`;
  document.getElementById(
    "min-hours"
  ).textContent = `–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω —É –¥–µ–Ω—å: ${formatTime(
    stats.minHours
  )}`;
  document.getElementById(
    "max-salary"
  ).textContent = `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –¥–µ–Ω—å: ${stats.maxSalary.toFixed(
    2
  )} –≥—Ä–Ω`;
  document.getElementById(
    "min-salary"
  ).textContent = `–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –¥–µ–Ω—å: ${stats.minSalary.toFixed(
    2
  )} –≥—Ä–Ω`;

  // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  document.getElementById("view-daily-statistics").style.display = "inline";
}
document
  .getElementById("view-daily-statistics")
  .addEventListener("click", async () => {
    const { startDate, endDate } = getDateRange(
      document.getElementById("period-select").value
    );

    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –ø–æ –¥–Ω—è—Ö
    openStatisticsModal(startDate, endDate);
  });

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function hideStatistics() {
  document.getElementById("total-hours").style.display = "none";
  document.getElementById("total-salary").style.display = "none";
  document.getElementById("max-hours").style.display = "none";
  document.getElementById("min-hours").style.display = "none";
  document.getElementById("max-salary").style.display = "none";
  document.getElementById("min-salary").style.display = "none";
}

// –î–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∏–∫ updateStatistics –≤ –æ–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É (—è–∫ –ø–æ–∫–∞–∑–∞–Ω–æ —Ä–∞–Ω—ñ—à–µ)
document
  .getElementById("period-select")
  .addEventListener("change", function () {
    const period = this.value;
    const { startDate, endDate } = getDateRange(period);

    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
    updateStatistics(startDate, endDate);

    // –ü–æ–∫–∞–∑—É—î–º–æ/—Ö–æ–≤–∞—î–º–æ –ø–æ–ª—è –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
    if (period === "custom") {
      document.getElementById("custom-period").style.display = "block";
    } else {
      document.getElementById("custom-period").style.display = "none";
    }
  });

async function openStatisticsModal(startDate, endDate) {
  // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
  document.getElementById("loading-overlay").style.display = "flex";

  try {
    const { allRecords, totalSalary } = await fetchAllDaysStatistics(
      startDate,
      endDate
    );

    let detailsContent = "<ul>";

    if (allRecords.length > 0) {
      allRecords.forEach((record) => {
        detailsContent += `<li><b>${record.date}</b> <span>${record.startTime} - ${record.endTime}</span></li>`;
      });

      detailsContent += `<li><b>–ó–∞–≥–∞–ª—å–Ω–∞ –ó–ü:</b> <span>${totalSalary.toFixed(
        2
      )} –≥—Ä–Ω</span></li>`;
    } else {
      detailsContent = "<p>–ë—É–±—ñ—á–æ–∫, —Ç–∏ –ø—Ä–æ—ó–±–ª–∞–Ω–∏–≤ —Ü–µ–π —á–∞—Å —ñ –Ω–æ—É –º–∞–Ω—ñ üò¢</p>";
    }

    document.getElementById("daily-details-content").innerHTML = detailsContent;
    document.getElementById("details-modal").style.display = "flex";
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
    document.getElementById("daily-details-content").innerHTML =
      "<p>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.</p>";
  } finally {
    // –•–æ–≤–∞—î–º–æ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    document.getElementById("loading-overlay").style.display = "none";
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –ø–æ –¥–Ω—è—Ö –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
async function fetchAllDaysStatistics(startDate, endDate) {
  const allRecords = [];
  let totalSalary = 0;
  let currentDate = new Date(startDate);

  while (currentDate <= new Date(endDate)) {
    const dateStr = currentDate.toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É —É DD.MM.YYYY
    const formattedDate = dateStr.split("-").reverse().join(".");

    console.log("üìÖ –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è:", formattedDate);

    const records = await fetchStatisticsByDate(dateStr);
    console.log("üìå –û—Ç—Ä–∏–º–∞–Ω—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è", formattedDate, ":", records);

    records.forEach((record) => {
      let recordDate = record.date;
      if (typeof record.date !== "string") {
        console.warn("‚ö† `record.date` –Ω–µ —î —Ä—è–¥–∫–æ–º. –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ...");
        recordDate = record.date.toDate().toISOString().split("T")[0];
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç—É —É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
      const formattedRecordDate = recordDate.split("-").reverse().join(".");

      allRecords.push({
        date: formattedRecordDate,
        startTime: record.startTime || "‚Äî",
        endTime: record.endTime || "‚Äî",
        salary: record.dailySalary || "0 –≥—Ä–Ω",
      });

      totalSalary += parseFloat(record.dailySalary.replace(" –≥—Ä–Ω", "")) || 0;
    });

    currentDate.setDate(currentDate.getDate() + 1);
  }

  console.log("üìä –§—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:", allRecords);
  return { allRecords, totalSalary };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π –¥–∞—Ç—ñ
async function fetchStatisticsByDate(date) {
  const data = await fetchDataByDate(date);
  console.log("Data fetched for", date, ":", data); // –õ–æ–≥ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  return data;
}

async function checkAndDisplayWorkData(selectedDate) {
  const dayElement = document.querySelector(`[data-date="${selectedDate}"]`);
  if (!dayElement) return;

  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–æ–±–æ—Ç—É –¥–ª—è —Ü—ñ—î—ó –¥–∞—Ç–∏
  const data = await fetchDataByDate(selectedDate);

  // –Ø–∫—â–æ –¥–∞–Ω—ñ —î, —Ä–æ–±–∏–º–æ –±–ª–æ–∫ .fc-daygrid-day-bottom –≤–∏–¥–∏–º–∏–º
  const dayBottom = dayElement.querySelector(".fc-daygrid-day-bottom");
  dayBottom.innerHTML += "<span></span>";
  if (data.length > 0 && dayBottom) {
    dayBottom.innerHTML = "<span>work</span>";
    dayBottom.style.display = "block"; // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –±–ª–æ–∫
  } else if (dayBottom) {
    dayBottom.style.display = "none"; // –°—Ö–æ–≤—É—î–º–æ –±–ª–æ–∫, —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î
  }
}

document.addEventListener("DOMContentLoaded", function () {
  const calendarEl = document.getElementById("calendar");

  if (typeof FullCalendar === "undefined") {
    console.error(
      "FullCalendar –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —É index.html."
    );
    return;
  }

  const calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: "dayGridMonth",
    locale: "uk",
    firstDay: 1,
    showNonCurrentDates: false,
    selectable: true,
    dateClick: async function (info) {
      const selectedDate = info.dateStr; // –§–æ—Ä–º–∞—Ç ISO: "2025-02-06"
      document.getElementById(
        "selected-date-title"
      ).textContent = `${selectedDate.split("-").reverse().join(".")}`;

      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É
      const data = await fetchDataByDate(selectedDate);
      const contentContainer = document.getElementById("date-info-content");

      if (data.length > 0) {
        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        contentContainer.innerHTML = `<ul>${data
          .map(
            (d) => `
      <li>
        <b>–ß–∞—Å:</b> <span>${d.startTime} - ${d.endTime}</span>
        <b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> <span>${d.workDuration}</span>
        <b>–ü—Ä–∏–º—ñ—Ç–∫–∏:</b> <span>${d.notes || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</span>
        <b>–°—É–º–∞:</b> <span>${d.dailySalary || "–ù–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ"}</span>
        <b>–¢–∞–π–º–µ—Ä:</b> <span id="timer-${d.startTime}">${checkIfTimerNeeded(
              selectedDate,
              d.startTime,
              d.endTime
            )}</span>
        <button class="edit-entry-btn" data-id="${
          d.id
        }" data-date="${selectedDate}">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
        <button class="delete-entry-btn" data-id="${
          d.id
        }" data-date="${selectedDate}">–í–∏–¥–∞–ª–∏—Ç–∏</button>
      </li>`
          )
          .join("")}</ul>`;
        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
        document.querySelectorAll(".edit-entry-btn").forEach((btn) => {
          btn.addEventListener("click", () => {
            const id = btn.dataset.id;
            const selected = data.find((item) => item.id === id);
            openEditFormWithId(id, selected, btn.dataset.date);
          });
        });

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –í–∏–¥–∞–ª–∏—Ç–∏
        document.querySelectorAll(".delete-entry-btn").forEach((btn) => {
          btn.addEventListener("click", async () => {
            const id = btn.dataset.id;
            const date = btn.dataset.date;

            if (confirm("–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å? ü•∫")) {
              await deleteWorkingHours(id);
              alert("–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ!");
              document.getElementById("date-info-modal").style.display = "none";
              await checkAndDisplayWorkData(date);
            }
          });
        });

        document.querySelectorAll(".edit-entry-btn").forEach((btn) => {
          btn.addEventListener("click", () => {
            const id = btn.dataset.id;
            const selected = data.find((item) => item.id === id);
            openEditFormWithId(id, selected, btn.dataset.date);
          });
        });

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–±—ñ—Ç
        data.forEach((d) => {
          if (isWorkActive(selectedDate, d.startTime, d.endTime)) {
            startRealTimeTimer(`timer-${d.startTime}`, selectedDate, d.endTime);
          }
        });
      } else {
        // –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
        contentContainer.innerHTML = `
        <p>–ë—É–±—ñ—á–æ–∫, —Ç–∏ —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–≤ —ñ–Ω—Ñ—É –Ω–∞ —Ü–µ–π –¥–µ–Ω—åü•≤ –≤–∏–ø—Ä–∞–≤ —Ü–µ!üíô</p>
        <form id="add-new-data-form">
          <label>–ß–∞—Å –ø–æ—á–∞—Ç–∫—É:</label>
          <div class="time-picker-wrapper">
          <input type="time" id="new-start-time" required>
          </div>
          <label>–ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</label>
          <input type="time" id="new-end-time" required>
          <label>–ü—Ä–∏–º—ñ—Ç–∫–∏:</label>
          <textarea id="new-notes" placeholder="–©–æ —Ü—ñ–∫–∞–≤–æ–≥–æ?"></textarea>
          <button type="submit">–î–æ–¥–∞—Ç–∏</button>
        </form>
      `;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏
        document
          .getElementById("add-new-data-form")
          .addEventListener("submit", async (event) => {
            event.preventDefault();

            const newStartTime =
              document.getElementById("new-start-time").value;
            const newEndTime = document.getElementById("new-end-time").value;
            const newNotes = document.getElementById("new-notes").value;

            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —ñ –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É
            const workDuration = calculateWorkDuration(
              newStartTime,
              newEndTime
            );
            const hourlyRate = 120; // –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–≤–∫—É –∑–∞ –≥–æ–¥–∏–Ω—É
            const dailySalary = calculateDailySalary(workDuration, hourlyRate);

            // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            await addWorkingHours(
              selectedDate,
              newStartTime,
              newEndTime,
              workDuration,
              dailySalary,
              newNotes
            );

            alert("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!");
            document.getElementById("date-info-modal").style.display = "none";
          });
      }

      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
      document.getElementById("date-info-modal").style.display = "flex";

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –±–ª–æ–∫
      checkAndDisplayWorkData(selectedDate); // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
    },

    // –ü–æ–¥—ñ—è, —è–∫–∞ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ø–µ—Ä–µ—Ö—ñ–¥ –º—ñ–∂ –º—ñ—Å—è—Ü—è–º–∏)
    datesSet: async function () {
      // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—è—Ü—è –∑ —Ç—É–ª–±–∞—Ä–∞
      const monthTitle =
        document.querySelector(".fc-toolbar-title").textContent;
      const monthName = monthTitle.split(" ")[0].toLowerCase(); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ –º–∞–ª–µ–Ω—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏

      // –ú–∞—Å–∏–≤ –º—ñ—Å—è—Ü—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –∑ –º–∞–ª–µ–Ω—å–∫–æ—ó –±—É–∫–≤–∏
      const monthNames = [
        "—Å—ñ—á–µ–Ω—å",
        "–ª—é—Ç–∏–π",
        "–±–µ—Ä–µ–∑–µ–Ω—å",
        "–∫–≤—ñ—Ç–µ–Ω—å",
        "—Ç—Ä–∞–≤–µ–Ω—å",
        "—á–µ—Ä–≤–µ–Ω—å",
        "–ª–∏–ø–µ–Ω—å",
        "—Å–µ—Ä–ø–µ–Ω—å",
        "–≤–µ—Ä–µ—Å–µ–Ω—å",
        "–∂–æ–≤—Ç–µ–Ω—å",
        "–ª–∏—Å—Ç–æ–ø–∞–¥",
        "–≥—Ä—É–¥–µ–Ω—å",
      ];

      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –º—ñ—Å—è—Ü—è (0-11)
      const visibleMonth = monthNames.indexOf(monthName);
      const currentYear = calendar.getDate().getFullYear(); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫

      const firstDay = new Date(currentYear, visibleMonth, 1); // –ü–µ—Ä—à–∞ –¥–∞—Ç–∞ –≤–∏–¥–∏–º–æ–≥–æ –º—ñ—Å—è—Ü—è
      const lastDay = new Date(currentYear, visibleMonth + 1, 0); // –û—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞ –≤–∏–¥–∏–º–æ–≥–æ –º—ñ—Å—è—Ü—è

      let currentDate = firstDay;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –¥–∞—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
      while (currentDate <= lastDay) {
        const formattedDate = currentDate.toISOString().split("T")[0];
        await checkAndDisplayWorkData(formattedDate); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ–∂–Ω–æ—ó –¥–∞—Ç–∏
        currentDate.setDate(currentDate.getDate() + 1); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è
      }
    },

    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –º—ñ—Å—è—Ü—è
  });

  calendar.render();
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
async function updateWorkingHours(
  oldStartTime,
  newStartTime,
  newEndTime,
  workDuration,
  dailySalary,
  notes
) {
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
  // –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
  await addWorkingHours(
    newStartTime,
    newEndTime,
    workDuration,
    dailySalary,
    notes
  );
}

function openEditFormWithId(id, data, selectedDate) {
  const contentContainer = document.getElementById("date-info-content");
  contentContainer.innerHTML = `
    <h3>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ</h3>
    <form id="edit-data-form">
      <label>–ß–∞—Å –ø–æ—á–∞—Ç–∫—É:</label>
      <input type="time" id="edit-start-time" value="${
        data.startTime
      }" required>
      <label>–ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</label>
      <input type="time" id="edit-end-time" value="${data.endTime}" required>
      <label>–ü—Ä–∏–º—ñ—Ç–∫–∏:</label>
      <textarea id="edit-notes">${data.notes || ""}</textarea>
      <button type="submit">–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏</button>
    </form>
  `;

  document
    .getElementById("edit-data-form")
    .addEventListener("submit", async (event) => {
      event.preventDefault();

      const newStartTime = document.getElementById("edit-start-time").value;
      const newEndTime = document.getElementById("edit-end-time").value;
      const newNotes = document.getElementById("edit-notes").value;

      const workDuration = calculateWorkDuration(newStartTime, newEndTime);
      const hourlyRate = 120;
      const dailySalary = calculateDailySalary(workDuration, hourlyRate);

      await updateExistingWorkingHours(
        id,
        newStartTime,
        newEndTime,
        workDuration,
        dailySalary,
        newNotes
      );

      alert("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
      document.getElementById("date-info-modal").style.display = "none";
      await checkAndDisplayWorkData(selectedDate);
    });
}

document.querySelectorAll(".delete-entry-btn").forEach((btn) => {
  btn.addEventListener("click", async () => {
    const id = btn.dataset.id;
    const date = btn.dataset.date;

    if (confirm("–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å? ü•∫")) {
      await deleteWorkingHours(id);
      alert("–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ!");
      document.getElementById("date-info-modal").style.display = "none";
      await checkAndDisplayWorkData(date);
    }
  });
});
