// –£—Å—ñ –≤–∞—à—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
import {
  getFirestore,
  collection,
  getDocs,
  query,
  where,
  addDoc,
  doc,
  updateDoc,
  deleteDoc,
} from "https://www.gstatic.com/firebasejs/11.2.0/firebase-firestore.js";
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.2.0/firebase-app.js";
import { getAnalytics } from "https://www.gstatic.com/firebasejs/11.2.0/firebase-analytics.js";
import {
  getStorage,
  ref,
  uploadBytes,
  getDownloadURL,
} from "https://www.gstatic.com/firebasejs/11.2.0/firebase-storage.js";

// –í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Firebase –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
const firebaseConfig = {
  apiKey: "AIzaSyDWLc2hvFj9H1Lxt2g9RZ3YaBziVzo6IaM",
  authDomain: "dr-dluhunovych.firebaseapp.com",
  projectId: "dr-dluhunovych",
  storageBucket: "dr-dluhunovych.firebasestorage.app",
  messagingSenderId: "1039035115906",
  appId: "1:1039035115906:web:00074738e04c271c8c079b",
  measurementId: "G-8L8RFQ2WLG",
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);
const db = getFirestore(app);

const authButton = document.querySelector(".universal-auth");
const loginSection = document.getElementById("login-section");
const authorizedSection = document.querySelector(".authorized-section");

// –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ –¥–∞—Ç–æ—é
export async function fetchDataByDate(date) {
  try {
    const recordsRef = collection(db, "working_hours");
    const q = query(recordsRef, where("date", "==", date));

    console.log("üî• Querying Firestore for date:", date); // –î–∏–≤–∏–º–æ—Å—è, —è–∫—É –¥–∞—Ç—É –ø–µ—Ä–µ–¥–∞—î–º–æ
    const querySnapshot = await getDocs(q);

    let result = [];
    querySnapshot.forEach((doc) => {
      result.push({ id: doc.id, ...doc.data() });
    });

    console.log("üìå Firestore result for", date, ":", result); // –î–∏–≤–∏–º–æ—Å—è, —â–æ –æ—Ç—Ä–∏–º—É—î–º–æ

    return result;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", error);
    return [];
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ó–ü –∑–∞ –¥–µ–Ω—å
export function calculateDailySalary(workDuration, hourlyRate) {
  const match = workDuration.match(/(\d+)\s–≥–æ–¥\s(\d+)\s—Ö–≤/);
  if (!match) return "–ü–æ–º–∏–ª–∫–∞ —É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É!";

  const hours = parseInt(match[1]);
  const minutes = parseInt(match[2]);

  // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ö–≤–∏–ª–∏–Ω
  const totalHours = hours + minutes / 60;

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏
  const salary = totalHours * hourlyRate;

  return `${salary.toFixed(2)} –≥—Ä–Ω`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ "X –≥–æ–¥ Y —Ö–≤"
export function calculateWorkDuration(startTime, endTime) {
  // –†–æ–∑–±–∏–≤–∞—î–º–æ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –≥–æ–¥–∏–Ω–∏ —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏
  const [startHours, startMinutes] = startTime.split(":").map(Number);
  const [endHours, endMinutes] = endTime.split(":").map(Number);

  // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–¥–∏–Ω–∏ —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏ —É –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω
  const startTotalMinutes = startHours * 60 + startMinutes;
  const endTotalMinutes = endHours * 60 + endMinutes;

  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ —É —Ö–≤–∏–ª–∏–Ω–∞—Ö
  let durationMinutes = endTotalMinutes - startTotalMinutes;

  // –Ø–∫—â–æ –∫—ñ–Ω–µ—Ü—å —á–∞—Å—É —Ä–∞–Ω—ñ—à–µ –∑–∞ –ø–æ—á–∞—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä–æ–±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—ñ–≤–Ω—ñ—á)
  if (durationMinutes < 0) {
    durationMinutes += 24 * 60;
  }

  // –û—Ç—Ä–∏–º—É—î–º–æ –≥–æ–¥–∏–Ω–∏ —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏
  const hours = Math.floor(durationMinutes / 60);
  const minutes = durationMinutes % 60;

  // –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ "X –≥–æ–¥ Y —Ö–≤"
  return `${hours} –≥–æ–¥ ${minutes} —Ö–≤`;
}

// –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
document
  .getElementById("add-form")
  .addEventListener("submit", async (event) => {
    event.preventDefault();
  });
export async function addWorkingHours(
  date,
  startTime,
  endTime,
  workDuration,
  dailySalary,
  notes
) {
  try {
    const recordsRef = collection(db, "working_hours");
    await addDoc(recordsRef, {
      date,
      startTime,
      endTime,
      workDuration,
      dailySalary,
      notes,
    });
    console.log("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", error);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ–π
function updateAuthState() {
  const loggedInUser = localStorage.getItem("loggedInUser");
  const statisticsSection = document.getElementById("statistics"); // –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∫—Ü—ñ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

  if (loggedInUser) {
    authButton.textContent = "–í–∏–π—Ç–∏";
    authButton.onclick = logout;
    loginSection.style.display = "none";
    authorizedSection.style.display = "block";
    statisticsSection.style.display = "block"; // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  } else {
    authButton.textContent = "–í–≤—ñ–π—Ç–∏";
    authButton.onclick = () => {
      loginSection.style.display = "block";
    };
    authorizedSection.style.display = "none";
    statisticsSection.style.display = "none"; // –•–æ–≤–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
async function authenticateUser(username, password) {
  document.getElementById("loading-overlay").style.display = "flex"; // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä

  const usersRef = collection(db, "users");
  const q = query(usersRef, where("username", "==", username));
  const querySnapshot = await getDocs(q);

  if (querySnapshot.empty) {
    alert("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
    document.getElementById("loading-overlay").style.display = "none"; // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
    return false;
  }

  let authenticated = false;
  querySnapshot.forEach((doc) => {
    const userData = doc.data();
    if (userData.password === password) {
      console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!");
      localStorage.setItem("loggedInUser", username);
      authenticated = true;
    }
  });

  if (!authenticated) {
    alert("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.");
    document.getElementById("loading-overlay").style.display = "none"; // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
  }

  updateAuthState();

  // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É
  setTimeout(() => {
    location.reload();
  }, 500);

  return authenticated;
}

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏ –≤—Ö–æ–¥—É
document
  .getElementById("login-form")
  .addEventListener("submit", function (event) {
    event.preventDefault();
    const username = document.getElementById("username").value;
    const password = document.getElementById("password").value;
    authenticateUser(username, password);
  });

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ö–æ–¥—É
function logout() {
  localStorage.removeItem("loggedInUser");
  updateAuthState();
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener("load", () => {
  updateAuthState();
});

updateAuthState();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É
function startCountdownTimer(endTime) {
  function updateTimer() {
    const now = new Date();
    const [endHours, endMinutes] = endTime.split(":").map(Number);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —á–∞—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
    const endDateTime = new Date();
    endDateTime.setHours(endHours, endMinutes, 0, 0);

    // –Ø–∫—â–æ –∫—ñ–Ω–µ—Ü—å –∑–º—ñ–Ω–∏ –≤–∂–µ –Ω–∞—Å—Ç–∞–≤, –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
    if (now >= endDateTime) {
      document.getElementById("countdown-timer").textContent =
        "–†–æ–±–æ—á–∏–π —á–∞—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è!";
      clearInterval(timerInterval);
      return;
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ª–∏—à–∫–æ–≤–æ–≥–æ —á–∞—Å—É
    let diffMs = endDateTime - now;
    let hours = Math.floor(diffMs / (1000 * 60 * 60));
    let minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    let seconds = Math.floor((diffMs % (1000 * 60)) / 1000);

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å (–∑–∞–≤–∂–¥–∏ –¥–≤—ñ —Ü–∏—Ñ—Ä–∏)
    hours = String(hours).padStart(2, "0");
    minutes = String(minutes).padStart(2, "0");
    seconds = String(seconds).padStart(2, "0");

    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–∞–ª–∏—à–∫–æ–≤–∏–π —á–∞—Å
    document.getElementById(
      "countdown-timer"
    ).textContent = `${hours}:${minutes}:${seconds}`;
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
  updateTimer();
  const timerInterval = setInterval(updateTimer, 1000);
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
document
  .getElementById("add-form")
  .addEventListener("submit", async (event) => {
    event.preventDefault();

    const date = document.getElementById("add-date-input").value;
    const startTime = document.getElementById("start-time-input").value;
    const endTime = document.getElementById("end-time-input").value;
    const hourlyRate = parseFloat(document.getElementById("hourly-rate").value); // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–≤–∫—É

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
    const workDuration = calculateWorkDuration(startTime, endTime);
    console.log("–û–±—á–∏—Å–ª–µ–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:", workDuration);

    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞—Ä–ø–ª–∞—Ç—É
    const dailySalary = calculateDailySalary(workDuration, hourlyRate);
    document.getElementById(
      "salary-result"
    ).textContent = `–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –¥–µ–Ω—å: ${dailySalary} –≥—Ä–Ω`;

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ —á–∞—Å—É
    startCountdownTimer(endTime);

    await addWorkingHours(date, startTime, endTime, workDuration, dailySalary);
    alert("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!");
  });
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
export async function fetchStatistics(startDate, endDate) {
  if (!startDate || !endDate) {
    console.error("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞—Ç–∏:", startDate, endDate);
    return [];
  }

  try {
    const recordsRef = collection(db, "working_hours");

    console.log(
      "üîé Fetching from Firestore for period:",
      startDate,
      "to",
      endDate
    );

    const startDateStr =
      typeof startDate === "string"
        ? startDate
        : startDate.toISOString().split("T")[0];
    const endDateStr =
      typeof endDate === "string"
        ? endDate
        : endDate.toISOString().split("T")[0];

    console.log("üõ† Querying Firestore from", startDateStr, "to", endDateStr);

    const q = query(
      recordsRef,
      where("date", ">=", startDateStr),
      where("date", "<=", endDateStr)
    );

    const querySnapshot = await getDocs(q);

    let records = [];
    querySnapshot.forEach((doc) => {
      records.push(doc.data());
    });

    console.log("üìå Fetched records:", records);
    return records;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    return [];
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export function calculateStatistics(records) {
  let totalHours = 0;
  let totalSalary = 0;
  let minHours = null; // –ó–º—ñ–Ω—é—î–º–æ –Ω–∞ null, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
  let maxHours = 0;
  let minSalary = null; // –ó–º—ñ–Ω—é—î–º–æ –Ω–∞ null
  let maxSalary = 0;

  records.forEach((record) => {
    const workDuration = record.workDuration;
    const dailySalary = parseFloat(record.dailySalary.replace(" –≥—Ä–Ω", ""));

    const match = workDuration.match(/(\d+)\s–≥–æ–¥\s(\d+)\s—Ö–≤/);
    if (match) {
      const hours = parseInt(match[1]);
      const minutes = parseInt(match[2]);
      const totalDurationHours = hours + minutes / 60;

      totalHours += totalDurationHours;
      totalSalary += dailySalary;

      // –û–±–Ω–æ–≤–ª—è—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
      if (minHours === null || totalDurationHours < minHours) {
        minHours = totalDurationHours;
      }
      if (totalDurationHours > maxHours) {
        maxHours = totalDurationHours;
      }

      if (minSalary === null || dailySalary < minSalary) {
        minSalary = dailySalary;
      }
      if (dailySalary > maxSalary) {
        maxSalary = dailySalary;
      }
    }
  });

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ —ó—Ö –Ω–µ –±—É–ª–æ, –≤–∏–≤–æ–¥–∏–º–æ 0 –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  return {
    totalHours: totalHours || 0,
    totalSalary: totalSalary || 0,
    minHours: minHours !== null ? minHours : 0,
    maxHours: maxHours || 0,
    minSalary: minSalary !== null ? minSalary : 0,
    maxSalary: maxSalary || 0,
  };
}

export async function updateExistingWorkingHours(
  id, // id –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  newStartTime,
  newEndTime,
  workDuration,
  dailySalary,
  notes
) {
  try {
    const docRef = doc(db, "working_hours", id); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞ id
    await updateDoc(docRef, {
      startTime: newStartTime,
      endTime: newEndTime,
      workDuration,
      dailySalary,
      notes,
    });

    console.log("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", error);
  }
}

export async function deleteWorkingHours(id) {
  try {
    const docRef = doc(db, "working_hours", id);
    await deleteDoc(docRef);
    console.log("–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ:", error);
  }
}
