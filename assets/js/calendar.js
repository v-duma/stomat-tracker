import {
  fetchDataByDate,
  addWorkingHours,
  calculateWorkDuration,
  calculateDailySalary,
} from "/assets/js/database.js";

document.addEventListener("DOMContentLoaded", function () {
  const calendarEl = document.getElementById("calendar");

  if (typeof FullCalendar === "undefined") {
    console.error(
      "FullCalendar –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —É index.html."
    );
    return;
  }

  const calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: "dayGridMonth",
    locale: "uk",
    selectable: true,
    dateClick: async function (info) {
      const selectedDate = info.dateStr; // –§–æ—Ä–º–∞—Ç ISO: "2025-02-06"
      document.getElementById(
        "selected-date-title"
      ).textContent = `${selectedDate.split("-").reverse().join(".")}`;

      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É
      const data = await fetchDataByDate(selectedDate);
      const contentContainer = document.getElementById("date-info-content");

      if (data.length > 0) {
        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        contentContainer.innerHTML = `<ul>${data
          .map(
            (d) =>
              `<li>
                <li><b>–ß–∞—Å:</b> <span>${d.startTime} - ${d.endTime}</span><li>
                <li><b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> <span>${d.workDuration}</span><li>
                <li><b>–ü—Ä–∏–º—ñ—Ç–∫–∏:</b> <span>${d.notes || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</span><li>
                <li><b>–°—É–º–∞:</b> <span>${
                  d.dailySalary || "–ù–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ"
                }</span></li>
                <li><b>–¢–∞–π–º–µ—Ä:</b> <span id="timer-${
                  d.startTime
                }">${checkIfTimerNeeded(
                selectedDate,
                d.startTime,
                d.endTime
              )}</span>
              </li>`
          )
          .join("")}</ul>`;

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–±—ñ—Ç
        data.forEach((d) => {
          if (isWorkActive(selectedDate, d.startTime, d.endTime)) {
            startRealTimeTimer(`timer-${d.startTime}`, selectedDate, d.endTime);
          }
        });
      } else {
        // –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
        contentContainer.innerHTML = `
          <p>–ë—É–±—ñ—á–æ–∫, —Ç–∏ —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–≤ —ñ–Ω—Ñ—É –Ω–∞ —Ü–µ–π –¥–µ–Ω—åü•≤ –≤–∏–ø—Ä–∞–≤ —Ü–µ!üíô</p>
          <form id="add-new-data-form">
            <label>–ß–∞—Å –ø–æ—á–∞—Ç–∫—É:</label>
            <div class="time-picker-wrapper">
            <input type="time" id="new-start-time" required><br>
            </div>
            <label>–ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</label>
            <input type="time" id="new-end-time" required><br>
            <label>–ü—Ä–∏–º—ñ—Ç–∫–∏:</label>
            <textarea id="new-notes" placeholder="–©–æ —Ü—ñ–∫–∞–≤–æ–≥–æ?"></textarea><br>
            <button type="submit">–î–æ–¥–∞—Ç–∏</button>
          </form>
        `;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏
        document
          .getElementById("add-new-data-form")
          .addEventListener("submit", async (event) => {
            event.preventDefault();

            const newStartTime =
              document.getElementById("new-start-time").value;
            const newEndTime = document.getElementById("new-end-time").value;
            const newNotes = document.getElementById("new-notes").value;

            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —ñ –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É
            const workDuration = calculateWorkDuration(
              newStartTime,
              newEndTime
            );
            const hourlyRate = 120; // –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–≤–∫—É –∑–∞ –≥–æ–¥–∏–Ω—É
            const dailySalary = calculateDailySalary(workDuration, hourlyRate);

            // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            await addWorkingHours(
              selectedDate,
              newStartTime,
              newEndTime,
              workDuration,
              dailySalary,
              newNotes
            );

            alert("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!");
            document.getElementById("date-info-modal").style.display = "none";
          });
      }

      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
      document.getElementById("date-info-modal").style.display = "flex";
    },
  });

  calendar.render();
});

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
document.querySelector(".close-modal").addEventListener("click", () => {
  document.getElementById("date-info-modal").style.display = "none";
});

// –¢–∞–π–º–µ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
function startRealTimeTimer(elementId, selectedDate, endTime) {
  const timerElement = document.getElementById(elementId);

  // –ü–æ—î–¥–Ω—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  const endDateTime = new Date(`${selectedDate}T${endTime}`);

  const interval = setInterval(() => {
    const now = new Date();
    const remainingTime = Math.max(0, endDateTime - now);

    if (remainingTime === 0) {
      timerElement.textContent = "–†–æ–±–æ—Ç–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å";
      clearInterval(interval);
      return;
    }

    const remainingSeconds = Math.floor(remainingTime / 1000);
    const hours = Math.floor(remainingSeconds / 3600);
    const minutes = Math.floor((remainingSeconds % 3600) / 60);
    const seconds = remainingSeconds % 60;

    timerElement.textContent = `${hours.toString().padStart(2, "0")}:${minutes
      .toString()
      .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  }, 1000);
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä–æ–±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
function isWorkActive(selectedDate, startTime, endTime) {
  const now = new Date();
  const startDateTime = new Date(`${selectedDate}T${startTime}`);
  const endDateTime = new Date(`${selectedDate}T${endTime}`);

  return now >= startDateTime && now <= endDateTime;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏
function checkIfTimerNeeded(selectedDate, startTime, endTime) {
  const now = new Date();
  const startDateTime = new Date(`${selectedDate}T${startTime}`);
  const endDateTime = new Date(`${selectedDate}T${endTime}`);

  if (now < startDateTime) {
    return "–©–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—å";
  } else if (now > endDateTime) {
    return "–†–æ–±–æ—Ç–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å";
  } else {
    return "–¢—Ä–∏–≤–∞—î...";
  }
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ —Ö—Ä–µ—Å—Ç–∏–∫ –∞–±–æ –ø–æ–∑–∞ –º–æ–¥–∞–ª–∫–æ—é
document.addEventListener("DOMContentLoaded", function () {
  const modal = document.getElementById("date-info-modal");
  const closeModal = document.querySelector(".close-modal");

  closeModal.addEventListener("click", () => {
    modal.style.display = "none";
  });

  window.addEventListener("click", (event) => {
    if (event.target === modal) {
      modal.style.display = "none";
    }
  });
});
